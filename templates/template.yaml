AWSTemplateFormatVersion: '2024-07-01'
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2024-07-01'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2024-07-01'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                Resource: arn:aws:dynamodb:YOUR_REGION:YOUR_ACCOUNT_ID:table/YourDynamoDBTable
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('YourDynamoDBTable')
          
          def lambda_handler(event, context):
              if event['httpMethod'] == 'POST':
                  data = json.loads(event['body'])
                  item = {
                      'id': str(uuid.uuid4()),
                      'data': data['data']
                  }
                  table.put_item(Item=item)
                  return {
                      'statusCode': 200,
                      'body': json.dumps(item)
                  }
              elif event['httpMethod'] == 'GET':
                  response = table.scan()
                  return {
                      'statusCode': 200,
                      'body': json.dumps(response['Items'])
                  }
      Runtime: python3.8
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: serverless-web-app-api
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: items
      RestApiId: !Ref ApiGateway
  ApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2024-07-01/functions/${LambdaFunction.Arn}/invocations
  ApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2024-07-01/functions/${LambdaFunction.Arn}/invocations
Outputs:
  ApiUrl:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/items